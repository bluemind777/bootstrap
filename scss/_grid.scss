// Container widths
//
// Set the container width, and override it for fixed navbars in media queries.

@if $enable-grid-classes {
  // Single container class with breakpoint max-widths
  .container {
    @include make-container();
    @include make-container-max-widths();
  }

  // 100% wide container at all breakpoints
  .container-fluid {
    @include make-container();
  }

  // Responsive containers that are 100% wide until a breakpoint
  @each $breakpoint, $container-max-width in $container-max-widths {
    .container-#{$breakpoint} {
      @extend .container-fluid;
    }

    @include media-breakpoint-up($breakpoint, $grid-breakpoints) {
      %responsive-container-#{$breakpoint} {
        max-width: $container-max-width;
      }

      @each $name, $width in $grid-breakpoints {
        @if ($container-max-width > $width or $breakpoint == $name) {
          .container#{breakpoint-infix($name, $grid-breakpoints)} {
            @extend %responsive-container-#{$breakpoint};
          }
        }
      }
    }
  }
}


// Row
//
// Rows contain your columns.

@if $enable-grid-classes {
  .grid,
  .row {
    @include make-row();

    > * {
      @include make-col-ready();
    }
  }

  .grid {
    margin-bottom: -$grid-gutter-width;

    > * {
      margin-bottom: $grid-gutter-width;
    }
  }

  // Remove the negative margin from default .row, then the horizontal padding
  // from all immediate children columns (to prevent runaway style inheritance).
  .grid-0,
  .row-0 {
    margin-right: 0;
    margin-left: 0;

    > * {
      padding-right: 0;
      padding-left: 0;
    }
  }

  .grid-0 {
    margin-bottom: 0;

    > * {
      margin-bottom: 0;
    }
  }

  .grid-sm,
  .row-sm {
    margin-right: -$grid-gutter-width-sm / 2;
    margin-left: -$grid-gutter-width-sm / 2;

    > * {
      padding-right: $grid-gutter-width-sm / 2;
      padding-left: $grid-gutter-width-sm / 2;
    }
  }

  .grid-sm {
    margin-bottom: -$grid-gutter-width-sm;

    > * {
      margin-bottom: $grid-gutter-width-sm;
    }
  }

  .grid-lg,
  .row-lg {
    margin-right: -$grid-gutter-width-lg / 2;
    margin-left: -$grid-gutter-width-lg / 2;

    > * {
      padding-right: $grid-gutter-width-lg / 2;
      padding-left: $grid-gutter-width-lg / 2;
    }
  }

  .grid-lg {
    margin-bottom: -$grid-gutter-width-lg;

    > * {
      margin-bottom: $grid-gutter-width-lg;
    }
  }
}

// Columns
//
// Common styles for small and large grid columns

@if $enable-grid-classes {
  @include make-grid-columns();
}
